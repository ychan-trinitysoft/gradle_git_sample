plugins {
    // 테스트를 위해 의도적으로 빌드 오류를 발생시키기 위한 코드
//    id("non.existent.plugin")
    id 'java'
    id 'org.cyclonedx.bom' version '1.10.0'
    id("org.spdx.sbom") version '0.8.0'
//    id 'com.github.hierynomus.license' version '0.16.1'
}

//task forceError {
//    doLast {
//        throw new IllegalStateException("의도적인 빌드 오류 발생!")
//    }
//}
//
//build.dependsOn forceError

//downloadLicenses {
//    includeProjectDependencies = true
//    dependencyConfiguration = 'runtimeClasspath' // If the gradle version is 4.6 or lower, then add the 'runtime' instead of 'runtimeClasspath'.
//}

group = 'org.trinity'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
//    implementation files('lib/hamcrest-library-3.0.jar')
//    implementation("com.fake.library:nonexistent:1.0.0")
    // 테스트를 위해 의도적으로 빌드 오류를 발생시키기 위한 코드
//    implementation("com.google.guava:guava:30.1-jre")
//    implementation("com.google.guava:guava:29.0-jre")

    implementation("at.swimmesberger:swingx-core:1.6.8")
    implementation("com.fifesoft:rsyntaxtextarea:3.5.3")
    implementation("com.formdev:flatlaf:3.5.4")
    implementation("javax.help:javahelp:2.0.05")
    implementation("net.sf.nimrod:nimrod-laf:1.2")
    implementation("org.drjekyll:colorpicker:2.0.1")
    implementation("org.hamcrest:hamcrest:3.0")
    implementation("org.scijava:swing-checkbox-tree:1.0.2")
    implementation("org.slf4j:slf4j-api:2.0.16")
    implementation("org.slf4j:slf4j-simple:2.0.16")

//    implementation("commons-cli:commons-cli:1.9.0")
//    implementation("org.apache.commons:commons-text:1.13.0")
//
//    // NOTE: Do not upgrade the jflex version. Later versions do not work.
//    compileOnly("de.jflex:jflex:1.4.1")
//
//    // NOTE: Be aware of reported issues with Eclipse and Batik
//    // See: https://github.com/logisim-evolution/logisim-evolution/issues/709
//    // implementation("org.apache.xmlgraphics:batik-swing:1.14")
//
//    testImplementation(platform("org.junit:junit-bom:5.11.4"))
//    testImplementation("org.junit.jupiter:junit-jupiter:5.11.4")
//    testImplementation("org.mockito:mockito-junit-jupiter:5.14.2")
//    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
}

//dependencyLocking {
//    lockAllConfigurations()
//}

test {
    useJUnitPlatform()
}

// 기본 빌드가 없으므로 타겟을 지정해야 합니다.
spdxSbom {
    targets {
        // "release"라는 이름의 대상을 생성합니다.
        // 이것은 작업 이름(spdxSbomForRelease) 및 출력 파일(release.spdx.json)에 사용됩니다.
        create("release") {
            // 여기에서 구성하세요
        }
    }
}